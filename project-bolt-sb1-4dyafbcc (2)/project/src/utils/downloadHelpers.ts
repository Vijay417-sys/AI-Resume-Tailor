import { TailoredResume } from '../types';

export const downloadTailoredResume = async (resume: TailoredResume): Promise<void> => {
  // Create formatted text content
  const content = `${resume.name}
${resume.contact}

SUMMARY
${resume.summary}

SKILLS
${resume.skills.join(' • ')}

EXPERIENCE
${resume.experience.join('\n')}

EDUCATION
${resume.education}

KEYWORD MATCHES
${resume.keywords.join(' • ')}

---
Generated by TailorCoach - AI Resume Optimization
`;

  // Create and download text file
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'tailored_resume.txt';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

// For future PDF generation (would require a PDF library)
export const downloadTailoredResumeAsPDF = async (resume: TailoredResume): Promise<void> => {
  // Placeholder for PDF generation
  // In a real app, you'd use libraries like jsPDF, html2pdf, or puppeteer
  console.log('PDF generation not implemented in demo');
  
  // Fallback to text download
  await downloadTailoredResume(resume);
};